{"version":3,"sources":["../../src/models/robot.js"],"names":["Robot","board","position","direction","x","y","isPlaced","Error","newX","newY","Direction","East","West","North","South","newPos","Position","isPositionValid","pos","dir","trim"],"mappings":"gnBAAA,wC;AACA,sC;;AAEqBA,K;AACjB,mBAAYC,KAAZ,EAAmB;AACf,aAAKA,KAAL,GAAaA,KAAb;AACA,aAAKC,QAAL,GAAgB,IAAhB;AACA,aAAKC,SAAL,GAAiB,IAAjB;AACH,K;AACU;AACP,mBAAO,KAAKD,QAAL,IAAiB,KAAKC,SAA7B;AACH,S;AACQ;AACL,mBAAU,KAAKD,QAAL,CAAcE,CAAxB,UAA8B,KAAKF,QAAL,CAAcG,CAA5C,UAAkD,KAAKF,SAAvD;AACH,S;AACM;AACH,gBAAI,CAAC,KAAKG,QAAL,EAAL,EAAsB;AAClB,sBAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACH;AACD,gBAAIC,OAAO,KAAKN,QAAL,CAAcE,CAAzB;AACA,gBAAIK,OAAO,KAAKP,QAAL,CAAcG,CAAzB;AACA,gBAAI,KAAKF,SAAL,KAAmBO,oBAAUC,IAAjC,EAAuC,EAAEH,IAAF;AACvC,gBAAI,KAAKL,SAAL,KAAmBO,oBAAUE,IAAjC,EAAuC,EAAEJ,IAAF;AACvC,gBAAI,KAAKL,SAAL,KAAmBO,oBAAUG,KAAjC,EAAwC,EAAEJ,IAAF;AACxC,gBAAI,KAAKN,SAAL,KAAmBO,oBAAUI,KAAjC,EAAwC,EAAEL,IAAF;AACxC,gBAAMM,SAAS,IAAIC,kBAAJ,CAAaR,IAAb,EAAmBC,IAAnB,CAAf;AACA,gBAAI,KAAKR,KAAL,CAAWgB,eAAX,CAA2BF,MAA3B,CAAJ,EAAwC;AACpC,qBAAKb,QAAL,GAAgBa,MAAhB;AACH,aAFD,MAEO;AACH,sBAAM,IAAIR,KAAJ,CAAU,kBAAV,CAAN;AACH;AACJ,S;AACM;AACH,gBAAI,CAAC,KAAKD,QAAL,EAAL,EAAsB;AAClB,sBAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACH;AACD,gBAAI,KAAKJ,SAAL,KAAmBO,oBAAUC,IAAjC,EAAuC,KAAKR,SAAL,GAAiBO,oBAAUG,KAA3B,CAAvC;AACK,gBAAI,KAAKV,SAAL,KAAmBO,oBAAUE,IAAjC,EAAuC,KAAKT,SAAL,GAAiBO,oBAAUI,KAA3B,CAAvC;AACA,gBAAI,KAAKX,SAAL,KAAmBO,oBAAUG,KAAjC,EAAwC,KAAKV,SAAL,GAAiBO,oBAAUC,IAA3B,CAAxC;AACA,gBAAI,KAAKR,SAAL,KAAmBO,oBAAUI,KAAjC,EAAwC,KAAKX,SAAL,GAAiBO,oBAAUE,IAA3B;AAChD,S;AACO;AACJ,gBAAI,CAAC,KAAKN,QAAL,EAAL,EAAsB;AAClB,sBAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACH;AACD,gBAAI,KAAKJ,SAAL,KAAmBO,oBAAUC,IAAjC,EAAuC,KAAKR,SAAL,GAAiBO,oBAAUI,KAA3B,CAAvC;AACK,gBAAI,KAAKX,SAAL,KAAmBO,oBAAUE,IAAjC,EAAuC,KAAKT,SAAL,GAAiBO,oBAAUG,KAA3B,CAAvC;AACA,gBAAI,KAAKV,SAAL,KAAmBO,oBAAUG,KAAjC,EAAwC,KAAKV,SAAL,GAAiBO,oBAAUE,IAA3B,CAAxC;AACA,gBAAI,KAAKT,SAAL,KAAmBO,oBAAUI,KAAjC,EAAwC,KAAKX,SAAL,GAAiBO,oBAAUC,IAA3B;AAChD,S;AACKO,W,EAAKC,G,EAAK;AACZ,gBAAI,CAAC,KAAKlB,KAAL,CAAWgB,eAAX,CAA2BC,GAA3B,CAAL,EAAsC;AAClC,sBAAM,IAAIX,KAAJ,CAAU,kBAAV,CAAN;AACH;AACD,iBAAKL,QAAL,GAAgBgB,GAAhB;AACA,iBAAKf,SAAL,GAAiBO,oBAAUS,IAAIC,IAAJ,EAAV,CAAjB;AACH,S,wCArDgBpB,K","file":"robot.js","sourcesContent":["import Direction from './direction';\r\nimport Position from './position';\r\n\r\nexport default class Robot {\r\n    constructor(board) {\r\n        this.board = board;\r\n        this.position = null;\r\n        this.direction = null;\r\n    }\r\n    isPlaced() {\r\n        return this.position && this.direction;\r\n    }\r\n    report() {\r\n        return `${this.position.x}, ${this.position.y}, ${this.direction}`;\r\n    }\r\n    move() {\r\n        if (!this.isPlaced()) {\r\n            throw new Error('Robot not placed');\r\n        }\r\n        let newX = this.position.x;\r\n        let newY = this.position.y;\r\n        if (this.direction === Direction.East) ++newX;\r\n        if (this.direction === Direction.West) --newX;\r\n        if (this.direction === Direction.North) ++newY;\r\n        if (this.direction === Direction.South) --newY;\r\n        const newPos = new Position(newX, newY);\r\n        if (this.board.isPositionValid(newPos)) {\r\n            this.position = newPos;\r\n        } else {\r\n            throw new Error('Invalid Position');\r\n        }\r\n    }\r\n    left() {\r\n        if (!this.isPlaced()) {\r\n            throw new Error('Robot not placed');\r\n        }\r\n        if (this.direction === Direction.East) this.direction = Direction.North;\r\n        else if (this.direction === Direction.West) this.direction = Direction.South;\r\n        else if (this.direction === Direction.North) this.direction = Direction.East;\r\n        else if (this.direction === Direction.South) this.direction = Direction.West;\r\n    }\r\n    right() {\r\n        if (!this.isPlaced()) {\r\n            throw new Error('Robot not placed');\r\n        }\r\n        if (this.direction === Direction.East) this.direction = Direction.South;\r\n        else if (this.direction === Direction.West) this.direction = Direction.North;\r\n        else if (this.direction === Direction.North) this.direction = Direction.West;\r\n        else if (this.direction === Direction.South) this.direction = Direction.East;\r\n    }\r\n    place(pos, dir) {\r\n        if (!this.board.isPositionValid(pos)) {\r\n            throw new Error('Invalid Position');\r\n        }\r\n        this.position = pos;\r\n        this.direction = Direction[dir.trim()];\r\n    }\r\n}"]}